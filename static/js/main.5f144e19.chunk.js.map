{"version":3,"sources":["components/Header.js","lib/useKeyPress.js","Context.js","components/SampleTextArea.js","components/TypingTextArea.js","components/PerformanceIndicator.js","components/ErrorMessage.js","Main.js","App.js","index.js"],"names":["Header","Navbar","color","dark","className","NavbarBrand","useKeyPress","cb","useState","pressedKey","setPressedKey","useEffect","keyDownHandler","key","length","keyUpHandler","window","addEventListener","removeEventListener","Context","React","createContext","ContextProvider","children","textForTyping","setTextForTyping","startTime","setStartTime","charCount","setCharCount","cpm","setCpm","typedChars","setTypedChars","currentChar","setCurrentChar","charsToType","setCharsToType","userInput","setUserInput","accuracy","setAccuracy","isAllTyped","setIsAllTyped","isError","setIsError","currentTime","Date","getTime","fetch","then","res","json","data","tempStr","JSON","stringify","substring","catch","error","console","charAt","substr","updatedTypedChars","updatedCharsToType","updatedUserInput","durationInMin","toFixed","Provider","value","SampleTextArea","useContext","Card","style","fontSize","backgroundColor","CardBody","CardText","fontWeight","TypingTextArea","outline","minHeight","PerformanceIndicator","unit","type","Badge","ErrorMessage","display","position","bottom","right","zIndex","width","src","process","alt","Main","Container","Row","Col","xs","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f144e19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Navbar,\r\n    NavbarBrand\r\n} from \"reactstrap\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <Navbar color=\"secondary\" dark className=\"d-flex justify-content-center p-3\">\r\n            <NavbarBrand><h3>Check your typing speed!</h3></NavbarBrand>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import {\r\n    useState,\r\n    useEffect\r\n} from \"react\";\r\n\r\nfunction useKeyPress(cb) {\r\n    const [pressedKey, setPressedKey] = useState();\r\n\r\n    useEffect(() => {\r\n        function keyDownHandler({key}) {\r\n            if (pressedKey !== key && key.length === 1) {\r\n                setPressedKey(key);\r\n                cb && cb(key);\r\n            }\r\n        }\r\n\r\n        function keyUpHandler() {\r\n            setPressedKey(null);\r\n        }\r\n\r\n        window.addEventListener(\"keydown\", keyDownHandler);\r\n        window.addEventListener(\"keyup\", keyUpHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", keyDownHandler);\r\n            window.removeEventListener(\"keyup\", keyUpHandler);\r\n        };\r\n    });\r\n    return pressedKey;\r\n}\r\n\r\nexport default useKeyPress;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nimport useKeyPress from \"./lib/useKeyPress\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst boilerplateText = \"The API is not responding, so you can only type this example of a text. A wonderful serenity \" +\r\n    \"has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart.\" +\r\n    \" I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. \" +\r\n    \"I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my \" +\r\n    \"talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was \" +\r\n    \"a greater artist than now.\"\r\n\r\nfunction ContextProvider({children}) {\r\n    const [textForTyping, setTextForTyping] = useState(\"\");\r\n    const [startTime, setStartTime] = useState(0);\r\n    const [charCount, setCharCount] = useState(0);\r\n    const [cpm, setCpm] = useState(\"0\");\r\n    const [typedChars, setTypedChars] = useState(\"\");\r\n    const [currentChar, setCurrentChar] = useState(\"\");\r\n    const [charsToType, setCharsToType] = useState(\"\");\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [accuracy, setAccuracy] = useState(\"0\");\r\n    const [isAllTyped, setIsAllTyped] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    const currentTime = () => new Date().getTime();\r\n\r\n    useEffect(downloadData, []);\r\n\r\n    function downloadData() {\r\n        fetch(\"https://baconipsum.com/api/?type=all-meat&sentences=8\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                let tempStr = JSON.stringify(data[0]);\r\n                setTextForTyping(tempStr.substring(1, tempStr.length - 1))\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error:\", error);\r\n                setTextForTyping(boilerplateText);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentChar(textForTyping.charAt(0));\r\n        setCharsToType(textForTyping.substr(1));\r\n    }, [textForTyping]);\r\n\r\n    useKeyPress(key => {\r\n        if (!isAllTyped) {\r\n            setIsAllTyped(charsToType.length === 0);\r\n            let updatedTypedChars = typedChars;\r\n            let updatedCharsToType = charsToType;\r\n            const updatedUserInput = userInput + key;\r\n            setUserInput(updatedUserInput);\r\n\r\n            if (!startTime) {\r\n                setStartTime(currentTime());\r\n            }\r\n\r\n            if (key === currentChar) {\r\n                setIsError(false);\r\n                let durationInMin = (currentTime() - startTime) / 60000;\r\n\r\n                setCharCount(charCount + 1);\r\n                setCpm(((charCount + 1) / durationInMin).toFixed(0));\r\n\r\n                updatedTypedChars += currentChar;\r\n                setTypedChars(updatedTypedChars);\r\n\r\n                setCurrentChar(charsToType.charAt(0));\r\n\r\n                updatedCharsToType = charsToType.substring(1);\r\n                setCharsToType(updatedCharsToType);\r\n            } else {\r\n                setIsError(true);\r\n            }\r\n\r\n            setAccuracy(\r\n                ((updatedTypedChars.length * 100) / updatedUserInput.length).toFixed(0)\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            cpm,\r\n            typedChars,\r\n            currentChar,\r\n            charsToType,\r\n            userInput,\r\n            setUserInput,\r\n            accuracy,\r\n            isError,\r\n            isAllTyped\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n}\r\n\r\nexport {Context, ContextProvider};","import React, {useContext} from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardText\r\n} from \"reactstrap\";\r\n\r\nimport {Context} from \"../Context\";\r\n\r\nfunction SampleTextArea() {\r\n    const {\r\n        typedChars,\r\n        currentChar,\r\n        charsToType,\r\n        isError,\r\n        isAllTyped\r\n    } = useContext(Context);\r\n\r\n    let charBackground = () => {\r\n        if (!isAllTyped) {\r\n            return isError ? \"#dc3545\" : \"#28a745\"\r\n        } else {\r\n            return \"transparent\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card style={{fontSize: 18, backgroundColor: \"gainsboro\"}}>\r\n            <CardBody>\r\n                <CardText>\r\n                    <span style={{color: \"gray\"}}>{typedChars}</span>\r\n                    <span className=\"p-1\" style={{\r\n                        color: \"white\",\r\n                        fontWeight: \"bold\",\r\n                        backgroundColor: charBackground()\r\n                    }}>{currentChar}</span>\r\n                    <span style={{color: \"black\"}}>{charsToType}</span>\r\n                </CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default SampleTextArea;","import React, {useContext} from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardText\r\n} from \"reactstrap\";\r\n\r\nimport {Context} from \"../Context\";\r\n\r\nfunction TypingTextArea() {\r\n    const {userInput} = useContext(Context);\r\n\r\n    return (\r\n        <Card outline color=\"secondary\" style={{fontSize: 18, minHeight: \"12rem\"}}>\r\n            <CardBody>\r\n                <CardText>\r\n                    {userInput}\r\n                    <span style={{color: \"#17a2b8\"}}>|</span>\r\n                </CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default TypingTextArea;","import React, {useContext} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Badge} from \"reactstrap\";\r\n\r\nimport {Context} from \"../Context\";\r\n\r\nfunction PerformanceIndicator({type, value}) {\r\n    const {isAllTyped} = useContext(Context);\r\n    let unit;\r\n    switch (type) {\r\n        case \"Speed\":\r\n            unit = \"cpm\";\r\n            break;\r\n        case \"Accuracy\":\r\n            unit = \"%\";\r\n            break;\r\n        default:\r\n            unit = null;\r\n    }\r\n\r\n    return (\r\n        <h3>\r\n            <Badge color={isAllTyped ? \"success\" : \"light\"}>{type}: {value} {unit}</Badge>\r\n        </h3>\r\n    );\r\n}\r\n\r\nPerformanceIndicator.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PerformanceIndicator;","import React, {useContext} from \"react\";\r\n\r\nimport {Context} from \"../Context\";\r\n\r\nfunction ErrorMessage() {\r\n    const imgSrc = process.env.PUBLIC_URL + \"/img/nelson.png\";\r\n    const {isError} = useContext(Context);\r\n    const style = {\r\n        display: isError ? \"block\" : \"none\",\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        right: \"20px\",\r\n        zIndex: \"999\",\r\n        width: \"200px\"\r\n    }\r\n\r\n    return (\r\n        <img src={imgSrc} style={style} alt=\"Ha-ha!\"/>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React, {useContext} from \"react\";\r\nimport {\r\n    Col,\r\n    Container,\r\n    Row\r\n} from \"reactstrap\";\r\n\r\nimport SampleTextArea from \"./components/SampleTextArea\";\r\nimport TypingTextArea from \"./components/TypingTextArea\";\r\nimport PerformanceIndicator from \"./components/PerformanceIndicator\";\r\nimport ErrorMessage from \"./components/ErrorMessage\";\r\nimport {Context} from \"./Context\";\r\n\r\nfunction Main() {\r\n    const {cpm, accuracy} = useContext(Context);\r\n\r\n    return (\r\n        <Container className=\"mb-2\">\r\n            <Row className=\"pt-4 pb-3\">\r\n                <Col>\r\n                    <p className=\"text-muted\">\r\n                        Just begin typing the text—and the counter will activate automatically. Good luck!\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"pt-3 pb-3\">\r\n                <Col xs=\"6\" className=\"d-flex justify-content-center\">\r\n                    <PerformanceIndicator type=\"Speed\" value={cpm}/>\r\n                </Col>\r\n                <Col xs=\"6\" className=\"d-flex justify-content-center\">\r\n                    <PerformanceIndicator type=\"Accuracy\" value={accuracy}/>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"pt-3 pb-3\">\r\n                <Col>\r\n                    <SampleTextArea/>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"pt-3 pb-3\">\r\n                <Col>\r\n                    <TypingTextArea/>\r\n                    <ErrorMessage/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n    return (\n        <>\n            <Header/>\n            <Main/>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from './App';\nimport {ContextProvider} from \"./Context\";\n\nReactDOM.render(\n    <ContextProvider>\n        <App/>\n    </ContextProvider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}